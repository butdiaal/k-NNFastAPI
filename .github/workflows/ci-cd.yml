name: CI/CD Pipeline for FastAPI

on:
  push:
    branches:
      - master
    paths:
      - 'app/'
      - 'scripts/vector_sendler.py'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
        with:
          separator: ","

      - name: Run unit tests
        run: |
          if [[ -n "$(echo '${{ steps.changed-files.outputs.all_changed_files }}' | grep 'app/')" ]]; then
            python -m unittest unit_test/test_db_repository.py unit_test/test_vector_service.py
          fi
          if [[ -n "$(echo '${{ steps.changed-files.outputs.all_changed_files }}' | grep 'scripts/vector_sendler.py')" ]]; then
            python -m unittest unit_test/test_vector_sendler.py
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Start Docker containers
        run: |
          docker-compose up --build -d

      - name: Wait for containers to be healthy
        run: |
          echo "Waiting for services to become healthy..."
          timeout 180 bash -c 'until [ "$(docker inspect -f "{{.State.Health.Status}}" some1-clickhouse-server)" == "healthy" ] &&
                                [ "$(docker inspect -f "{{.State.Health.Status}}" consul)" == "healthy" ]; do
            sleep 5
            echo "Still waiting..."
          done'
          echo "All services are healthy!"

      - name: Check running containers
        run: |
          docker ps -a

      - name: Wait for application startup
        run: |
          echo "Waiting for application to be ready..."
          timeout 300 bash -c 'until curl -s -f -o /dev/null http://localhost:4000/; do
            sleep 5
            echo "Application not ready yet..."
          done'
          echo "Application is running!"

      - name: Check application logs
        run: |
          docker-compose logs app

      - name: Check application health from inside container
        run: |
          docker exec my-app curl -s -o /dev/null -w "%{http_code}" http://localhost:4000/ || echo "Application is not responding"