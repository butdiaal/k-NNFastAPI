name: CI/CD Pipeline for FastAPI

on:
  push:
    branches:
      - master
    paths:
      - 'app/**'
      - 'scripts/vector_sendler.py'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
        with:
          separator: ","

      - name: Run unit tests
        run: |
          if [[ -n "$(echo '${{ steps.changed-files.outputs.all_changed_files }}' | grep 'app/')" ]]; then
            python -m unittest unit_test/test_db_repository.py unit_test/test_vector_service.py
          fi
          if [[ -n "$(echo '${{ steps.changed-files.outputs.all_changed_files }}' | grep 'scripts/vector_sendler.py')" ]]; then
            python -m unittest unit_test/test_vector_sendler.py
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Start Docker containers
        run: |
          docker-compose down -v
          docker-compose up --build -d

      - name: Check container logs
        run: |
          docker-compose logs

      - name: Check container status
        run: |
          docker ps -a

      - name: Check Consul availability
        run: |
          timeout 120 bash -c 'until curl -s -f -o /dev/null http://localhost:8500; do
            sleep 2
            echo "Consul not ready yet..."
          done'
          echo "Consul is running!"

      - name: Check ClickHouse availability
        run: |
          timeout 300 bash -c 'until curl -s -f -o /dev/null http://localhost:8123; do
            sleep 2
            echo "ClickHouse not ready yet..."
          done'
          echo "ClickHouse is running!"

      - name: Check if application is running
        run: |
          timeout 300 bash -c 'until docker ps --format "{{.Names}}" | grep -q "my-app"; do
            sleep 2
            echo "Container not started yet..."
          done'
          
          echo "Container is running!"
          
          timeout 1200 bash -c 'until curl -s -f -o /dev/null http://localhost:4000/; do
            sleep 20
            echo "Application not ready yet..."
          done'
          
          echo "Application is running and responding!"